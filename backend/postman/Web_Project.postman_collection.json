{
	"info": {
		"_postman_id": "2ad85c97-8a7b-46b2-ad40-37f6b91291d7",
		"name": "Web_Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36024951"
	},
	"item": [
		{
			"name": "Create user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const uniqueUsername = `user_${Math.random().toString(36).substring(7)}`;\r",
							"pm.variables.set('uniqueUsername', uniqueUsername);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation($username: String!, $password: String!) {\r\n  createUser(username: $username, password: $password) {\r\n    id\r\n    username\r\n  }\r\n}\r\n",
						"variables": "{\r\n  \"username\": \"{{uniqueUsername}}\",\r\n  \"password\": \"password\"\r\n}\r\n"
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest({\r",
							"  url: 'http://localhost:3000/auth/login',\r",
							"  method: 'POST',\r",
							"  header: 'Content-Type: application/json',\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({\r",
							"      username: 'test1',\r",
							"      password: 'test1234'\r",
							"    })\r",
							"  }\r",
							"}, function (err, res) {\r",
							"  if (err) {\r",
							"    console.log(err);\r",
							"  } else {\r",
							"    var jsonData = res.json();\r",
							"    pm.environment.set(\"accessToken\", jsonData.access_token);\r",
							"  }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query {\r\n  users {\r\n    id\r\n    username\r\n  }\r\n}\r\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create conversation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate unique usernames using timestamps\r",
							"const user1 = {\r",
							"  username: `user1_${Date.now()}`,\r",
							"  password: 'password1'\r",
							"};\r",
							"\r",
							"const user2 = {\r",
							"  username: `user2_${Date.now()}`,\r",
							"  password: 'password2'\r",
							"};\r",
							"\r",
							"// Save the unique usernames to environment variables for later use\r",
							"pm.environment.set('user1_username', user1.username);\r",
							"pm.environment.set('user2_username', user2.username);\r",
							"\r",
							"// Register User 1\r",
							"pm.sendRequest({\r",
							"  url: 'http://localhost:3000/auth/register',\r",
							"  method: 'POST',\r",
							"  header: 'Content-Type: application/json',\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify(user1)\r",
							"  }\r",
							"}, function (err, res) {\r",
							"  if (err) {\r",
							"    console.log('Error registering user1:', err);\r",
							"  } else {\r",
							"    console.log('User1 registered:', res.json());\r",
							"\r",
							"    // Register User 2\r",
							"    pm.sendRequest({\r",
							"      url: 'http://localhost:3000/auth/register',\r",
							"      method: 'POST',\r",
							"      header: 'Content-Type: application/json',\r",
							"      body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(user2)\r",
							"      }\r",
							"    }, function (err, res) {\r",
							"      if (err) {\r",
							"        console.log('Error registering user2:', err);\r",
							"      } else {\r",
							"        console.log('User2 registered:', res.json());\r",
							"\r",
							"        // Login User 1\r",
							"        pm.sendRequest({\r",
							"          url: 'http://localhost:3000/auth/login',\r",
							"          method: 'POST',\r",
							"          header: 'Content-Type: application/json',\r",
							"          body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(user1)\r",
							"          }\r",
							"        }, function (err, res) {\r",
							"          if (err) {\r",
							"            console.log('Error logging in user1:', err);\r",
							"          } else {\r",
							"            const jsonData = res.json();\r",
							"            const token = jsonData.access_token;\r",
							"            pm.environment.set('accessToken', token);\r",
							"          }\r",
							"        });\r",
							"      }\r",
							"    });\r",
							"  }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\r\n  createConversation(username1: \"{{user1_username}}\", username2: \"{{user2_username}}\") {\r\n    id\r\n    users {\r\n      id\r\n      username\r\n    }\r\n  }\r\n}\r\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		}
	]
}